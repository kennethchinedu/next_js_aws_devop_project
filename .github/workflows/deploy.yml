name: Deploy_app

on:
  workflow_run:
    workflows: ["Cd_build"]
    types:
      - completed

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'
  

jobs:
  terraform:
    name: 'terraform_setup'
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.0.11

      - name: 'Terraform Init'
        run: terraform init -lock=false
        working-directory: ./infra 

      - name: 'Terraform Plan'
        run: terraform plan -var-file=terraform.tfvars -lock=false
        working-directory: ./infra

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve -var-file=terraform.tfvars -lock=false
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

      - name: Capture Terraform Outputs
        id: capture_outputs
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "")
          # SSH_PRIVATE_KEY=$(terraform output -raw ssh_private_key 2>/dev/null || echo "")
          USER=$(terraform output -raw user_name 2>/dev/null || echo "")

          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV

          # Format the SSH private key correctly and save to file
          # echo -e "\n$SSH_PRIVATE_KEY\n" | sed 's/\\n/\n/g' > private_key.pem
          # chmod 600 private_key.pem
          # echo "private key saved"
        working-directory: ./infra

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          mkdir -p ~/.ssh
          mv private_key ~/.ssh/
          ssh-keyscan -H ${EC2_PUBLIC_IP} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/private_key ${USER}@${EC2_PUBLIC_IP} "cd /home/ubuntu/github_code_base && git pull origin main"


         





  #  --------   
  #   - name: Setup SSH
  #     uses: webfactory/ssh-agent@v0.5.0
  #     with:
  #       ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  #   - name: Add EC2 host to known hosts
  #     run: |
  #       ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

  #   - name: Deploy to EC2
  #     run: |
  #       # Replace the following with your deployment script or commands
  #       ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }}
  #       echo "Hello world"

      
      # - name: Install SSH and Configure Key
      #   run: |
      #     # Install SSH client if not already installed
      #     command -v ssh-agent >/dev/null || (apt-get update -y && apt-get install openssh-client -y)
      #     # Start SSH agent
      #     eval $(ssh-agent -s)
      #     # Decode the base64 SSH private key and add it to the agent
      #     echo "${{ secrets.AWS_EC2_PRIVATE_KEY_BASE64 }}" | base64 -d | ssh-add -
      #     # Configure SSH settings
      #     mkdir -p ~/.ssh
      #     touch ~/.ssh/config
      #     touch ~/.ssh/known_hosts
      #     sudo chmod -R 400 ~/.ssh
      #     # Set appropriate permissions to allow access to known_hosts
      #     sudo chmod 644 ~/.ssh/known_hosts
      #     # Add the EC2 public IP to known hosts
      #     ssh-keyscan -H "${{ env.EC2_PUBLIC_IP }}" >> ~/.ssh/known_hosts
      #     echo "SSH setup complete."


      # - name: Connect and Deploy
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_PUBLIC_IP }} "echo Hello world"



    #   - name: Setup SSH
    #     uses: webfactory/ssh-agent@v0.5.3
    #     with:
    #       ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    #   - name: Connect and Deploy
    #     run: |
    #       ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_PUBLIC_IP }} "echo Hello world"

      # - name: Ssh into Ec2
      #   run: |
      #     eval $(ssh-agent -s)
      #     echo "$private_key.pem" > key.pem
      #     cat key.pem
      #     chmod 600 key.pem
      #     ssh -vvv -i key.pem -o  StrictHostKeyChecking=no ubuntu@${{ env.EC2_PUBLIC_IP }} 
      #     echo "Connected"


#------------------

      # - name: Setup SSH Agent
      #   uses: webfactory/ssh-agent@v0.5.0
      #   with:
      #     ssh-private-key: private_key.pem  #

      # - name: Add EC2 host to known hosts
      #   run: ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }}>> ~/.ssh/known_hosts    
      
      # - name: Deploy to EC2
      #   run: |
      #     # Replace the following with your deployment script or commands
      #     ssh ubuntu@${{ env.EC2_PUBLIC_IP }}  
    
        # - name: Add EC2 host to known hosts
      #   run: |
      #     ssh -i "private_key.pem" ${{secrets.USER}}@${{env.EC2_PUBLIC_IP}}.us-e-1.compute.amazonaws.com
      #     echo "Hello world"

      #     ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
      #   env:
      #     EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}

      # - name: Deploy to EC2
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_PUBLIC_IP }} << EOF
      #       echo "Deploying application to EC2 instance..."
      #       # Replace with your actual deployment commands
      #       docker ps
      #     EOF
      #   env:
      #     EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}

        
  

           
  # ssh_into_ec2:
  #   name: 'SSH into EC2 and Run Docker'
  #   needs: terraform
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: 'Checkout repository'
  #       uses: actions/checkout@v2

  #     # SSH into the EC2 instance
  #     - name: 'SSH into EC2 and Pull Docker Image'
  #       run: |
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
  #         chmod 600 private_key.pem
          
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << EOF
            
  #           #Log in to Docker hub
  #           echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

  #           # Pull Docker image
  #           make pull

  #           # Run Docker container
  #           make run
  #         EOF
  #       env:
  #         EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}  # Public IP of the EC2 instance
  #         EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH private key stored in GitHub secrets

  #     # Verify Docker container is running
  #     - name: 'Verify Docker Container'
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} "docker ps"
  #         echo "rivate ip $LOAD_BALANCER"
