name: Deploy_app

on:
   workflow_run:
     workflows: ["Cd_build"] 
     types:
       - completed  
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  terraform:
    name: 'Terraform setup'
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.0.11

      # Initializing terraform
      - name: 'Terraform Init'
        run: terraform init -lock=false
        working-directory: ./infra 

      # Terraform Plan
      - name: 'Terraform Plan'
        run: terraform plan -var-file=terraform.tfvars -lock=false
        working-directory: ./infra

      # Terraform Apply
      - name: 'Terraform Apply'
        run: terraform apply -auto-approve -var-file=terraform.tfvars -lock=false
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1' 

      - name: Inspect Terraform Output
        run: |
          terraform output ec2_public_ip
          terraform output ssh_private_key
          terraform output user_name
          terraform output dns_name
        working-directory: ./infra
          

      - name: Capture Terraform Outputs
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "")
          SSH_PRIVATE_KEY=$(terraform output -raw ssh_private_key 2>/dev/null || echo "")
          LOAD_BALANCER=$(terraform output -raw dns_name 2>/dev/null || echo "")
          USER=$(terraform output -raw user_name 2>/dev/null || echo "")

          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

          # Capture the SSH private key as a multiline environment variable using special block syntax
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$SSH_PRIVATE_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "LOAD_BALANCER=$LOAD_BALANCER" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV

          # Optional: Print the values (for debugging purposes, remove these lines later)
          echo "Public IP: $EC2_PUBLIC_IP"
          echo "Load Balancer DNS: $LOAD_BALANCER"

      # - name: Capture Terraform Outputs
      #   run: |
      #     EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "")
      #     SSH_PRIVATE_KEY=$(terraform output -raw ssh_private_key 2>/dev/null || echo "")
      #     LOAD_BALANCER=$(terraform output -raw dns_name 2>/dev/null || echo "")
      #     USER=$(terraform output -raw user_name 2>/dev/null || echo "")

      #     echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
      #     echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
      #     echo "$SSH_PRIVATE_KEY" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV
      #     echo "public ip $EC2_PUBLIC_IP"
      #     echo "load_balance dns $LOAD_BALANCER"
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: terraform
    environment: staging

    steps:
      - uses: actions/checkout@v2 
      - name: Build & Deploy
        env:
             PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
             HOSTNAME: ${{secrets.EC2_PUBLIC_IP}}
             USER_NAME: ${{secrets.USER}}
             AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
             AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             AWS_DEFAULT_REGION: 'us-east-1'
        #ssh
        # run: |
        #   echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        #   ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}

        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem

      - name: SSH into EC2 instance and run commands
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} << EOF
          # Place your SSH commands here
          echo "Connected to EC2"
          EOF

           
  # ssh_into_ec2:
  #   name: 'SSH into EC2 and Run Docker'
  #   needs: terraform
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: 'Checkout repository'
  #       uses: actions/checkout@v2

  #     # SSH into the EC2 instance
  #     - name: 'SSH into EC2 and Pull Docker Image'
  #       run: |
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
  #         chmod 600 private_key.pem
          
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << EOF
            
  #           #Log in to Docker hub
  #           echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

  #           # Pull Docker image
  #           make pull

  #           # Run Docker container
  #           make run
  #         EOF
  #       env:
  #         EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}  # Public IP of the EC2 instance
  #         EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH private key stored in GitHub secrets

  #     # Verify Docker container is running
  #     - name: 'Verify Docker Container'
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} "docker ps"
  #         echo "rivate ip $LOAD_BALANCER"
